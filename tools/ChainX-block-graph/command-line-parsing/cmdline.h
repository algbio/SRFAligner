/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "chainx-block-graph"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "chainx-block-graph"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int chain_to_eds_flag;	/**< @brief Perform chaining on the Elastic Degenerate String relaxation of the graph (currently the only implemented chaining solution) (default=on).  */
  const char *chain_to_eds_help; /**< @brief Perform chaining on the Elastic Degenerate String relaxation of the graph (currently the only implemented chaining solution) help description.  */
  int global_flag;	/**< @brief Chain between the whole query and any maximal graph path (default=off).  */
  const char *global_help; /**< @brief Chain between the whole query and any maximal graph path help description.  */
  int semi_global_flag;	/**< @brief Chain between the whole query and any graph subpath (default=off).  */
  const char *semi_global_help; /**< @brief Chain between the whole query and any graph subpath help description.  */
  int unsorted_input_flag;	/**< @brief Do not assume the input GAF anchors to be sorted (at the cost of loading all anchors) (default=off).  */
  const char *unsorted_input_help; /**< @brief Do not assume the input GAF anchors to be sorted (at the cost of loading all anchors) help description.  */
  int no_split_output_matches_flag;	/**< @brief Do not split edge matches into node matches in the output chains (default=off).  */
  const char *no_split_output_matches_help; /**< @brief Do not split edge matches into node matches in the output chains help description.  */
  long initial_guess_arg;	/**< @brief Fix a constant starting guess for the cost of the optimal chain (default='100').  */
  char * initial_guess_orig;	/**< @brief Fix a constant starting guess for the cost of the optimal chain original value given at command line.  */
  const char *initial_guess_help; /**< @brief Fix a constant starting guess for the cost of the optimal chain help description.  */
  double initial_guess_coverage_arg;	/**< @brief Have the starting guess for the optimal cost be a fraction of the inverse coverage of the read (GUESS * (read length - read coverage)) instead of a constant (by default this is disabled) (default='0').  */
  char * initial_guess_coverage_orig;	/**< @brief Have the starting guess for the optimal cost be a fraction of the inverse coverage of the read (GUESS * (read length - read coverage)) instead of a constant (by default this is disabled) original value given at command line.  */
  const char *initial_guess_coverage_help; /**< @brief Have the starting guess for the optimal cost be a fraction of the inverse coverage of the read (GUESS * (read length - read coverage)) instead of a constant (by default this is disabled) help description.  */
  double ramp_up_factor_arg;	/**< @brief At each chaining iteration, multiply by RAMPUP the guess for the cost of the optimal chain (default='4.0').  */
  char * ramp_up_factor_orig;	/**< @brief At each chaining iteration, multiply by RAMPUP the guess for the cost of the optimal chain original value given at command line.  */
  const char *ramp_up_factor_help; /**< @brief At each chaining iteration, multiply by RAMPUP the guess for the cost of the optimal chain help description.  */
  long alternative_chains_arg;	/**< @brief Chain N+1 times, removing the used anchors after each execution, and output all chains (default='0').  */
  char * alternative_chains_orig;	/**< @brief Chain N+1 times, removing the used anchors after each execution, and output all chains original value given at command line.  */
  const char *alternative_chains_help; /**< @brief Chain N+1 times, removing the used anchors after each execution, and output all chains help description.  */
  long threads_arg;	/**< @brief Max # threads (default='-1').  */
  char * threads_orig;	/**< @brief Max # threads original value given at command line.  */
  const char *threads_help; /**< @brief Max # threads help description.  */
  int overwrite_flag;	/**< @brief Overwrite the output file, if it exists (default=off).  */
  const char *overwrite_help; /**< @brief Overwrite the output file, if it exists help description.  */
  int split_output_matches_graphaligner_flag;	/**< @brief Filter out node matches of length 1 for use in GraphAligner (default=off).  */
  const char *split_output_matches_graphaligner_help; /**< @brief Filter out node matches of length 1 for use in GraphAligner help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int chain_to_eds_given ;	/**< @brief Whether chain-to-eds was given.  */
  unsigned int global_given ;	/**< @brief Whether global was given.  */
  unsigned int semi_global_given ;	/**< @brief Whether semi-global was given.  */
  unsigned int unsorted_input_given ;	/**< @brief Whether unsorted-input was given.  */
  unsigned int no_split_output_matches_given ;	/**< @brief Whether no-split-output-matches was given.  */
  unsigned int initial_guess_given ;	/**< @brief Whether initial-guess was given.  */
  unsigned int initial_guess_coverage_given ;	/**< @brief Whether initial-guess-coverage was given.  */
  unsigned int ramp_up_factor_given ;	/**< @brief Whether ramp-up-factor was given.  */
  unsigned int alternative_chains_given ;	/**< @brief Whether alternative-chains was given.  */
  unsigned int threads_given ;	/**< @brief Whether threads was given.  */
  unsigned int overwrite_given ;	/**< @brief Whether overwrite was given.  */
  unsigned int split_output_matches_graphaligner_given ;	/**< @brief Whether split-output-matches-graphaligner was given.  */

  char **inputs ; /**< @brief unnamed options (options without names) */
  unsigned inputs_num ; /**< @brief unnamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
